import numpy as np
import pandas as pd
from DecisionTree import DecisionTree

np.random.seed(100)

class TreeBagging:
    def __init__(self, x, y, n_estimators=1, set_samples=7):
        self.trees = []
        self.x, self.y = x, y
        self.n_estimators, self.set_samples = n_estimators, set_samples
        for i in range(n_estimators):
            ids = self.generate_row_index(self.set_samples)
            x_tree = x.iloc[ids, :]
            y_tree = y[ids]
            self.trees.append(DecisionTree(x_tree, y_tree))

    def generate_row_index(self, set_samples):
        """ Pick a set_samples number of indices without replacement from the rows available in x to build the tree
        """
        rnd_ids = np.random.permutation(len(self.y))[:self.set_samples]
        return rnd_ids

    def fix_columns(self, x_test):
        """ Reorder x_test that we use for predictions to match the column order of x, the data frame used for training
        """
        cols = self.x.columns.tolist()
        return x_test[cols]

    def predict(self, x_test):
        x_test = self.fix_columns(x_test)
        return np.mean([t.predict(x_test) for t in self.trees], axis=0)




















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































